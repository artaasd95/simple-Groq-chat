import streamlit as st
import os
from groq import Groq
import random
import base64
from PIL import Image

from langchain.chains import ConversationChain, LLMChain
from langchain_core.prompts import (
    ChatPromptTemplate,
    HumanMessagePromptTemplate,
    MessagesPlaceholder,
)
from langchain_core.messages import SystemMessage
from langchain.chains.conversation.memory import ConversationBufferWindowMemory
from langchain_groq import ChatGroq
from langchain.prompts import PromptTemplate



def image_to_base64(image):
    buffered = image.convert("RGB")
    with open("temp_image.jpg", "wb") as temp_image_file:
        buffered.save(temp_image_file, format="JPEG")
    with open("temp_image.jpg", "rb") as image_file:
        base64_image = base64.b64encode(image_file.read()).decode('utf-8')
    return base64_image

def main():
    

    
    # Get Groq API key
    groq_api_key = os.environ['GROQ_API_KEY']

    # Display the Groq logo
    spacer, col = st.columns([5, 1])  
    # with col:  
        # st.image('groqcloud_darkmode.png')

    # The title and greeting message of the Streamlit application
    st.title("Chat with Groq!")
    st.write("Hello! I'm your friendly Groq chatbot. I can help answer your questions, provide information, or just chat. I'm also super fast! Let's start our conversation!")

    # Add customization options to the sidebar
    st.sidebar.title('Customization')
    system_prompt = st.sidebar.text_input("System prompt:")
    model = st.sidebar.selectbox(
        'Choose a model',
        ['llama-3.2-11b-vision-preview']
    )
    
    
    user_question = st.text_input("Ask a question:")

    uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
    if uploaded_file is not None:
        # Load the image using PIL
        image = Image.open(uploaded_file)

        # Display the uploaded image
        st.image(image, caption="Uploaded Image", use_column_width=True)

        # Convert image to base64
        base64_image = image_to_base64(image)


    # Initialize Groq Langchain chat object and conversation
    client = Groq(api_key=groq_api_key)
    
    # If the user has asked a question,
    completion = client.chat.completions.create(
    model= model,
    messages=[
        {
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": user_question
                },
                {
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{base64_image}",
                    }
                }
            ]
        },
        {
            "role": "assistant",
            "content": ""
        }
    ],
    temperature=1,
    max_tokens=1024,
    top_p=1,
    stream=False,
    stop=None,
)
        
    # The chatbot's answer is generated by sending the full prompt to the Groq API.
    response = completion.choices[0].message
    st.write("Chatbot:", response.content)

if __name__ == "__main__":
    main()
